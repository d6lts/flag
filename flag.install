<?php
// $Id$

/**
 * Implementation of hook_install().
 */
function flag_install() {
  // If Views Bookmark is available, skip the install and do an upgrade instead.
  if (strpos($GLOBALS['db_type'], 'mysql') === 0) {
    include_once(drupal_get_path('module', 'flag') .'/flag.module');
    include_once(drupal_get_path('module', 'flag') .'/flag.views_bookmark.inc');
    if (flag_views_bookmark_update_needed()) {
      flag_views_bookmark_update();
      return;
    }
  }

  $success = drupal_install_schema('flag');

  if ($success) {
    // Insert a starting record.
    $options = array(
      'show_on_page' => 1,
      'show_on_teaser' => 1,
      'show_on_form' => 1,
    );
    // Note that UI strings in the following SQL, e.g. "Bookmark this", aren't
    // wrapped in t() and that's intentional: they are passed to t() later,
    // thus allowing for multilingual sites.
    db_query("INSERT INTO {flags} (content_type, name, title, flag_short, flag_long, flag_message, unflag_short, unflag_long, unflag_message, roles, global, options) VALUES ('node', 'bookmarks', 'Bookmarks', 'Bookmark this', 'Add this post to your bookmarks', 'This post has been added to your bookmarks', 'Unbookmark this', 'Remove this post from your bookmarks', 'This post has been removed from your bookmarks', '2', 0, '%s')", serialize($options));
    db_query("INSERT INTO {flag_types} (fid, type) VALUES (1, 'story')");
    db_query("INSERT INTO {flag_types} (fid, type) VALUES (1, 'forum')");
    db_query("INSERT INTO {flag_types} (fid, type) VALUES (1, 'blog')");
  }

  if ($success) {
    drupal_set_message(t('Flag module installed tables successfully.'));
  }
  else {
    drupal_set_message(t('The installation of Flag module failed.'), 'error');
  }
}

/**
 * Implementation of hook_uninstall().
 */
function flag_uninstall() {
  drupal_uninstall_schema('flag');
  $result = db_query('SELECT name FROM {variable} WHERE name LIKE "flag_%"');
  while ($row = db_fetch_object($result)) {
    variable_del($row->name);
  }

  drupal_set_message(t('Flag has been uninstalled.'));
}

/**
 * Implementation of hook_schema().
 */
function flag_schema() {
  $schema = array();

  $schema['flags'] = array(
    'fields' => array(
      'fid' => array(
        'type' => 'serial',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'content_type' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => ''
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
        'default' => '',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'flag_short' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'flag_long' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => ''
      ),
      'flag_message' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'unflag_short' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'unflag_long' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => ''
      ),
      'unflag_message' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'roles' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'global' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
      ),
      'options' => array(
        'type' => 'text',
        'default' => NULL,
      ),
    ),
    'primary key' => array('fid'),
    'unique keys' => array(
      'name' => array('name')
    ),
  );

  $schema['flag_content'] = array(
    'fields' => array(
      'fid' => array(
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'content_type' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => ''
      ),
      'content_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'timestamp' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-size' => 11,
      )
    ),
    'primary key' => array('fid', 'content_type', 'content_id', 'uid'),
    'indexes' => array(
      'content_type_content_id' => array('content_type', 'content_id'),
      'content_type_uid' => array('content_type', 'uid'),
    ),
  );

  $schema['flag_types'] = array(
    'fields' => array(
      'fid' => array(
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '')
    ),
    'indexes' => array(
      'fid' => array('fid'),
    ),
  );

  $schema['flag_counts'] = array(
    'fields' => array(
      'fid' => array(
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'content_type' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'content_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'count' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      )
    ),
    'primary key' => array('fid', 'content_type', 'content_id'),
    'indexes' => array(
      'fid_content_type' => array('fid, content_type'),
      'content_type_content_id' => array('content_type', 'content_id'),
    ),
  );

  return $schema;
}

/**
 * Delete obsolete actions provided by beta3.
 *
 * Note: To ease maintenance, this code is compatible with both D5 and D6.
 */
function flag_update_6000() {
  $ret = array();
  // This conditional ensures we have Actions 2.x, not Actions 1.x.
  if (db_table_exists('actions_assignments') || db_table_exists('trigger_assignments')) {

    // Step 1: Find all actions we need to delete.

    $aids = array();
    // We can't just search for "actions of type flag" because this isn't future-compatible.
    $res = db_query("SELECT aid FROM {actions} WHERE callback IN ('flag_action_email', 'flag_action_delete', 'flag_action_unpublish', 'flag_action_moderate')");
    while ($row = db_fetch_object($res)) {
      $aids[] = $row->aid;
    }

    if (!$aids) {
      $ret[] = array(
        'success' => TRUE,
        'query' => t('No old actions to remove.'),
      );
    }
    else {
      $ret[] = array(
        'success' => TRUE,
        'query' => t('I\'ll be removing the following actions: @aids', array('@aids' => implode(', ', $aids))),
      );
    }

    // Step 2: Delete them through API.

    // We can't do `if (module_exists('actions'))`: this code should work for D6 as
    // well, and it doesn't have an Actions module.
    if (function_exists('actions_delete')) {
      foreach ($aids as $aid) {
        actions_delete($aid);
      }
    }

    // Step 3: Delete them through SQL, in case Actions/Trigger aren't enabled.

    foreach ($aids as $aid) {
      foreach (array('actions', 'actions_assignments', 'trigger_assignments') as $table) {
        if (db_table_exists($table)) {
          $ret[]= _flag_update_sql("DELETE FROM {{$table}} WHERE aid = '%s'", $aid);
        }
      }
    }
    // Note: No need to delete from the {actions_aid} table; Actions doesn't do that.

    // Step 4: Remove a bogus record possibly created because of a bug (see
    // http://drupal.org/node/271460).

    foreach (array('actions_assignments', 'trigger_assignments') as $table) {
      if (db_table_exists($table)) {
        $ret[] = _flag_update_sql("DELETE FROM {{$table}} WHERE hook = 'flag' AND aid = ''");
      }
    }
  }
  else {
    $ret[] = array(
      'success' => TRUE,
      'query' => t('Cleanup of Actions tables is unneeded.'),
    );
  }

  return $ret;
}

// This is a replacement for update_sql(). The latter doesn't support placeholders.
function _flag_update_sql($sql) {
  $args = func_get_args();
  array_shift($args);
  $result = db_query($sql, $args);
  // Users are going to see '%s' and '%d' in the report and they're going to
  // think there's a bug. So lets replace the placeholders with something less
  // suspicious.
  $sql = strtr($sql, array('%s' => '***', '%d' => '***'));
  return array('success' => $result !== FALSE, 'query' => check_plain($sql));
}

